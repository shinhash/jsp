표현식 <%= %> => EL(Expression Language)
스크립틀릿 <% %> => 루프, 조건분기 ==> JSTL(Jsp Standard Tag Library)


==>> 나중에는 사용하지 않음
	더 보기 쉽게 표현할 수 있는 방법이 있다(EL, JSTL)
	
	
EL : JSP의 기본 문법을 보완하는 언어
	 표현식을 간결하게 표현할 수 있다.
	 
사용방법 : ${속성명}
		 ==> 범위가 좁은 scope부터 넓은 scope로 탐색
		 page => request => session => application


EL은 원래 웹 애플리케이션에서 프레젠테이션 계층의 요구를 충족하기 위해 간단한 언어로 설계되었다.


	A simple syntax restricted to the evaluation of expressions
	jsp2.0 버전(which version)부터 안내되는 규약(spec)
	
	
	Variables and nested properties
	scope 기본객체 영역에 있는 속성 사용
	
	
	Relational, logical, arithmetic, conditional, and empty operators
	수치, 관계, 논리 연산



main.jsp 기존 코드
			<% MemberVO memvo = (MemberVO)session.getAttribute("S_MEMBER"); %>
			<%if(memvo != null){%>
			<a class="navbar-brand" href="#">JSP/SPRING [ <%= memvo.getUserid() %> ]</a>
			<% }else{%>
			<a class="navbar-brand" href="#">JSP/SPRING</a>
			<%} %>
기존 스크립틀릿과 표현식의 경우 개발자가 NULL처리도 해야 하지만
EL의 경우 NULL값의 경우 자동적으로 처리 해주기 때문에 별도의 처리는 필요없다.

위 코드는 session 영ㅇ역에 S_MEMBER라는 이름의 속성이 저장되어 있고 타입 MemberVO
===> EL을 통해 접근 ${S_MEMBER.필드명} --> ${S_MEMBER.userid}
	 vo.필드명으로 작성하더라도 EL에서 해당 필드으 getter메서드를 호출
	 (getter, setter 메서드이름의 네이밍 룰을 따르기 때문에 유추할 수가 있다.)
	 
	 
	 
	 
즉
	<% MemberVO memvo = (MemberVO)session.getAttribute("S_MEMBER"); %>
	<%if(memvo != null){%>
	<a class="navbar-brand" href="#">JSP/SPRING [ <%= memvo.getUserid() %> ]</a>
	<% }else{%>
	<a class="navbar-brand" href="#">JSP/SPRING</a>
	<%} %>
	(==> 위에서는 만약 해당 memvo가 NULL일 경우를 개발자가 처리해야한다.)
	
이러한 코드가
	<a class="navbar-brand" href="#">JSP/SPRING [ ${S_MEMBER.userid} ]</a>
위와 같이 한줄로 표현이 가능해진다.



